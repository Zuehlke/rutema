require 'rutema/parsers/xml'
require 'rutema/reporters/activerecord'
#Configures the parser to use. You can only use one parser and the last entry wins
configuration.parser={:class=>Rutema::MinimalXMLParser}
#Configures the reporters to use. You can define as many reporters as you wish (there are stdout, email, active record and couchdb reporters included). The Hash defined here is passed in it's entirety over to the reporter so each reporter defines different keys.
#Check each reporter's RDoc entry for details
configuration.reporter={:class=>Rutema::ActiveRecordReporter, :db=>{:adapter=>"sqlite3",:database=>"sample.db"}}
configuration.tests=[
"../specs/T001.spec",
"../specs/T002.spec",
"../specs/T003.spec",
"../specs/T004.spec",
"../specs/T005.spec",
"../specs/T006.spec"
]
#This is a way to centrally configure tools and commands used to implement test steps.
#When building command lines for test steps in the parser it is a good idea to have things like paths, IP addresses and other environment specific parameters in a single place. Using tool= and path= entries you can then access this information in the parser i.e. configuration.tool.test[:path]
configuration.tool={:name=>"test",:path=>".",:configuration=>{:key=>"value"}}
configuration.path={:name=>"test",:path=>"."}
#The context Hash is used to pass general information to the rutema components (parser, runner, reporters). It's the easiest way to pass versioning information etc. Since the configuration file is Ruby code nothing prevents you from programmatically generating the context content here.
configuration.context={:key=>"value"}
#The test specification that runs as a sanity check before the entire suite. If it fails then the rest of the tests are not executed
configuration.check="../specs/check.spec"
#Teardown script
configuration.teardown="../specs/teardown.spec"
#Setup script
configuration.setup="../specs/setup.spec"