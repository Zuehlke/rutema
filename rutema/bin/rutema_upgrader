#  Copyright (c) 2008-2010 Vassilis Rizopoulos. All rights reserved.
require 'rutema/system'
require 'patir/base'

#Parses the command line arguments
def parse_command_line args
  args.options do |opt|
    opt.on("Usage:")
    opt.on("rutema_upgrader [options] config_file")
    opt.on("Options:")
    opt.on("--debug", "-d","Turns on debug messages") { $DEBUG=true }
    opt.on("-v", "--version","Displays the version") { $stdout.puts("v#{Version::STRING}");exit 0 }
    opt.on("--help", "-h", "-?", "This text") { $stdout.puts opt; exit 0 }
    opt.parse!
    #and now the rest
    if args.empty?
      $stdout.puts opt 
      exit 0
    else
      return args.shift
    end
  end
end
logger=Patir.setup_logger
config_file=parse_command_line(ARGV)
begin
  raise "No configuration file defined!" if !config_file
  configuration=Rutema::RutemaXConfigurator.new(config_file,logger).configuration
  Dir.chdir(File.dirname(config_file)) do 
   coordinator=Rutema::Coordinator.new(configuration,logger)
   specs=coordinator.parse_all_specifications
   specifications=Hash.new
   specs.each do |s|
    specifications[s.name]=[s.title,s.description]
   end
   database=nil
   configuration.reporters.each do |rep|
    if rep[:class]==Rutema::ActiveRecordReporter
       database=rep[:db][:database]
      break
    end
   end
   if database && File.exists?(database)
     logger.info("Found database file #{database}")
     Rutema.connect_to_ar(database,logger,false)
     begin 
       test_scenario=Rutema::Model::Scenario.find(:first)
     rescue
       logger.debug($!)
       logger.fatal("Problem accessing the database: #{$!.message}")
       exit 1
     end
     if test_scenario.respond_to?(:title) && test_scenario.respond_to?(:description)
       logger.info("Schema appears updated")
     else
       logger.info("Updating schema")
       Rutema::Model::UpgradeV9toV10.up
     end
     logger.info("Setting title and description values")
      Rutema::Model::Scenario.find(:all).each do |sc|
       if specifications[sc.name]
         logger.info("Setting columns for #{sc.name}:#{sc.id}")
         sc.title=specifications[sc.name][0]
         sc.description=specifications[sc.name][1]
         sc.save
       end
      end
   else
     logger.fatal("Database '#{database}' does not exist")
     exit 1
   end
  end 
rescue Patir::ConfigurationException
  logger.debug($!)
  logger.fatal("Configuration error '#{$!.message}'")
  exit 1
rescue
  logger.debug($!)
  logger.fatal("#{$!.message}")
  exit 1
end
