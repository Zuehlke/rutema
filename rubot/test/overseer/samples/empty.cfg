#The rubot configuration file is a valid ruby file.
#
#This makes it very easy to define new steps of build processes in a separate file.
#Using them then is as simple as using configuration.load_from_file(filename) with the extension filename.

#some general information about the project
#:name - the name of the project
#:url - the URL for the project's website
configuration.project={ :name=>"test",:url=>"http://localhost"}

#Database connection options.
#
#For the moment only sqllite is supported, so the only valid key is filename.
#Moreover, you can skip this and trust rubot to use the default 'master.db'
#configuration.database={:filename=>"master.db"}
                              
#Status handler for email notification
#
#You can pass a hash mapping user names to mailing addresses {username=>email_address} using the mail_map key
#in order to match between source control users (that appear as change authors) to email addresses.
#
#If a recipient (including those defined in :recipients) is not a valid email address (xx@xxxxxx) then the handler will look in it's mail map
#If that is not present or a match is not found then the address will be recipient@domain
#configuration.status_handler={:class=>Rubot::EmailStatusHandler,
#        :server=>"localhost",
#        :domain=>"pluginbuilder.org",
#        :recipients=>["markus"],
#        :mail_map=>{"admin"=>"markus@pluginbuilder.org"},
#        :notification=>:all
#        }
#Slaves
#define the slaves known using the keys :name, :ip and :port
configuration.slave={:name=>"testslave",
        :ip=>"127.0.0.1",
        :port=>"7000"}
#commands are defined as a Hash using the following keys:
#:name - a name to reference the command with. Should be unique
#:class - the class to use as the implementation for the command. Changing the class may add definition keys (depending on the implementation)
#:strategy - what to do on warning or failure. Valid values are :flunk_on_warning, :fail_on_warning, :fail_on_error, :flunk_on_error. Default is :flunk_on_error
configuration.command={:name=>"echo",
        :class=>Patir::ShellCommand,
        :cmd=>"echo Hello",
        :working_directory=>".",
        :strategy=>:flunk_on_error}
#A command sequence is defined as {:name=>name, :commands=>[cmd1,cmd2,cmd3]} where cmdX are the names of the commands set in the order of execution
configuration.command_sequence={:name=>"echo_sequence",
        :commands=>["echo"]}
#
configuration.builder={:name=>"testbuilder",
        :command_sequence=>"echo_sequence",
        :rubot_slave=>"testslave",
        :check_interval=>20}  
configuration.scheduler={
        :name=>"svn_poll",
        :class=>Rubot::SvnPollScheduler,
        :poll=>[{:url=>'http://patir.rubyforge.org/svn/rubot/trunk', 
        :builder=>"test_builder"}],
        :check_interval=>30
}